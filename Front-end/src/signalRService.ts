import * as signalR from "@microsoft/signalr";

// L·∫•y token t·ª´ localStorage an to√†n h∆°n
const getToken = () => {
  try {
    const persistData = localStorage.getItem("persist:root");
    return persistData ? JSON.parse(JSON.parse(persistData).auth).token : null;
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y token t·ª´ localStorage:", error);
    return null;
  }
};

const connection = new signalR.HubConnectionBuilder()
  .withUrl("https://localhost:7246/notificationhub", {
    accessTokenFactory: () => getToken() || "", // Tr√°nh l·ªói n·∫øu token null
  })
  .withAutomaticReconnect()
  .configureLogging(signalR.LogLevel.Information)
  .build();

export const startConnection = async () => {
  if (connection.state !== signalR.HubConnectionState.Disconnected) {
    console.log("üîå SignalR is already connected or connecting...");
    return;
  }

  try {
    await connection.start();
    console.log("‚úÖ SignalR Connected!");
  } catch (err) {
    console.error("‚ùå SignalR Connection Error:", err);
    setTimeout(() => startConnection(), 5000); // Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5 gi√¢y
  }
};

export default connection;
